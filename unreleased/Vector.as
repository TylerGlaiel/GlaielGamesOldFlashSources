//COPYRIGHT TYLER GLAIEL 2008//VERSION 2.4package {	import flash.display.MovieClip;	public class Vector {		public var x:Number;		public var y:Number;		private static  var convert:Number = Math.PI/180;		public function Vector(i:Number, j:Number):void {			x = i;			y = j;		}		public function norm():void {			var l:Number = length;			if (l != 0) {				x /= l;				y /= l;			}		}		public static function add(v:Vector, v2:Vector):Vector {			return new Vector(v2.x + v.x,v2.y + v.y);		}		public static function subtract(v:Vector, v2:Vector):Vector {			return new Vector(v.x - v2.x,v.y - v2.y);		}		public static function dot(v:Vector, v2:Vector):Number {			return v2.x * v.x + v2.y * v.y;		}		public static function angle(v:Vector, v2:Vector):Number {			if (v2.length==0) {				return 0;			}			return Math.acos(dot(v,v2) / v2.length * v.length) / convert;		}		public static function angle2(v:Vector, v2:Vector):Number {			var dp:Number = angle(v, v2);			if (dp==0) {				return 0;			}			if (comp(v.rotateNew(dp), v2)<.0001) {				return dp;			} else {				return - dp;			}		}		public static function comp(v:Vector, v2:Vector):Number {			if (v.length*v2.length==0) {				return 0;			}			return Math.abs(v.x / v.length - v2.x / v2.length) + Math.abs(v.y / v.length - v2.y / v2.length);		}		public function get length():Number {			return Math.sqrt(x * x + y * y);		}		public function perpendicular():Vector {			return new Vector(- y,x);		}		public function scale(val:Number):void {			x *= val;			y *= val;		}		public function rotate(degrees:Number):void {			degrees *= convert;			var s:Number = Math.sin(degrees);			var c:Number = Math.cos(degrees);			var tx:Number = x*c-y*s;			var ty:Number = x*s+y*c;			x = tx;			y = ty;		}		public function rotateNew(degrees:Number):Vector {			degrees *= convert;			var s:Number = Math.sin(degrees);			var c:Number = Math.cos(degrees);			return new Vector(x * c - y * s,x * s + y * c);		}		public function reflect(normal:Vector):Vector {			var normal2:Vector = new Vector(normal.x, normal.y);			normal2.norm();			normal2.scale(2*dot(this, normal2));			return subtract(this,normal2);		}		public function constrain(amount:Number, type:String = "Greater") {			if (type == "Greater") {				if (length>amount) {					norm();					scale(amount);				}			}			if (type == "Always") {				norm();				scale(amount);			}			if (type == "Less") {				if (length<amount) {					norm();					scale(amount);				}			}		}		public function draw(point:Vector, scale:Number, tgt:MovieClip):void {			tgt.graphics.lineStyle(3, 0xFFFFFF, 100);			tgt.graphics.moveTo(point.x, point.y);			tgt.graphics.lineTo(point.x+x*scale, point.y+y*scale);			var nv:Vector = new Vector(-x, -y);			nv.norm();			nv.scale(7);			nv.rotate(-45);			tgt.graphics.lineTo(point.x+x+nv.x, point.y+y+nv.y);			tgt.graphics.moveTo(point.x+x*scale, point.y+y*scale);			nv.rotate(90);			tgt.graphics.lineTo(point.x+x+nv.x, point.y+y+nv.y);			tgt.graphics.lineStyle(2, 0x000000, 100);			tgt.graphics.moveTo(point.x, point.y);			tgt.graphics.lineTo(point.x+x*scale, point.y+y*scale);			var nv2:Vector = new Vector(-x, -y);			nv2.norm();			nv2.scale(7);			nv2.rotate(-45);			tgt.graphics.lineTo(point.x+x+nv2.x, point.y+y+nv2.y);			tgt.graphics.moveTo(point.x+x*scale, point.y+y*scale);			nv2.rotate(90);			tgt.graphics.lineTo(point.x+x+nv2.x, point.y+y+nv2.y);		}	}}