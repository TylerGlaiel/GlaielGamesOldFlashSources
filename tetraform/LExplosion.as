package {	import flash.display.BitmapData;	import flash.geom.*;	public class LExplosion {		public static var BMP:BitmapData;		public static var ScaleDown:Number;		public static var BASE:Attractable;		private var particles:Vector.<LParticle>;		public function LExplosion(x:Number, y:Number, n:int, speed:Vec2D){			particles = new Vector.<LParticle>();			for(var i:int = 0; i<n; i++){				var p:LParticle = new LParticle();				p.speed = new Vec2D((Math.random()*20+10)*n/20, 0);				if(p.speed.length > 100) p.speed.length = Math.random()*100;				p.speed.rotate(Math.random()*360);				p.speed.x += speed.x;				p.speed.y += speed.y;				p.pos = new Vec2D(x-Playfield.xmin, y-Playfield.ymin);				p.color = [0xFFFFFFFF, 0xFF00FF00, 0xFF005500, 0xFF00FF55, 0xFF0055FF][int(Math.random()*5)];				p.time = 60 + Math.random()*20;				particles.push(p);			}		}		public function update():Boolean{			var r:Number;			var c:uint;			var d:uint;			var g:uint;			var b:uint;			for(var i:int = 0; i<particles.length; i++){				var dx:Vec2D = new Vec2D(particles[i].pos.x+Playfield.xmin - Playfield.x, particles[i].pos.y+Playfield.ymin - Playfield.y);				if(dx.length2 < BASE.radius * BASE.radius){					particles.splice(i, 1);					i--;					BASE.life += .65;					new Bleep();				} else {					if(particles[i].time <= 0){						dx.norm();						particles[i].speed.x -= dx.x;						particles[i].speed.y -= dx.y;					}					particles[i].pos.x += particles[i].speed.x;					particles[i].pos.y += particles[i].speed.y;					if(particles[i].time <= 0){						particles[i].speed.scale(.95);					} else {						particles[i].speed.scale(.8);					}					particles[i].time -= 2;					r = 5;					BMP.fillRect(new Rectangle((particles[i].pos.x-r)*ScaleDown, (particles[i].pos.y-r)*ScaleDown, (r*2)*ScaleDown, (r*2)*ScaleDown), particles[i].color);				}			}			return particles.length != 0;		}	}}internal class LParticle {	var speed:Vec2D;	var pos:Vec2D;	var color:uint;	var time:int;}