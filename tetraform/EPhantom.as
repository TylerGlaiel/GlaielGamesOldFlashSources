package {	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.MovieClip;	public class EPhantom extends Enemy{		private var timer:int = 0;		private var dir:Number;		private var tdir:Number;		private var breakTimer:int;		private var copy:MovieClip;		private var oscillator:int;				private var dCopy:Vec2D;		private var dCopySPD:Vec2D;				private var orbit:Number;				public function EPhantom (a:Attractable, b:Attractable){			super(a, b);			dir = 9;			tdir = 0;			breakTimer = 0;			oscillator = 0;						timer = 0;						copy = new Phantom();			handle.clip.parent.addChild(copy);			copy.visible = false;			dCopy = new Vec2D(0, 0);			dCopySPD = new Vec2D(0, 0);						orbit = Math.random()*500 + 250;			handle.rumble = 10;		}		public override function update(){			var dist:Vec2D = new Vec2D(base.x - handle.x, base.y-handle.y);			var dl:Number = dist.length;			dist.length -= orbit;						if(Math.random()<.005){				dir = Math.random()>.5?18:-18;			}			tdir += (dir-tdir)*.1;						timer++;						if(timer == 700){				MovieClip(handle.clip).glow.play();			}			if(timer > 800){				handle.die();				handle.points = 0;				var speed:Vec2D = new Vec2D(0, -1);				speed.length = 5;				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);				speed.rotate(45);				ROOT.launchMissile(new Vec2D(handle.x, handle.y), speed);			}						if(handle.stable && dl < 900){				dCopySPD.x += Math.random()-.5;				dCopySPD.y += Math.random()-.5;				dCopy.x += dCopySPD.x;				dCopy.y += dCopySPD.y;				if(dCopy.length > 500){					dCopy.length = 500;					dCopySPD.scale(-1);				}				if(dCopySPD.length > 10){					dCopySPD.length = 10;				}								oscillator = (oscillator+1)%2;				handle.clip.visible = oscillator == 0;				copy.visible = oscillator == 1;				copy.x = handle.clip.x + dCopy.x;				copy.y = handle.clip.y + dCopy.y;			} else {				dCopy.x = 0;				dCopy.y = 0;				dCopySPD.x = 0;				dCopySPD.y = 0;				oscillator = 0;				handle.clip.visible = oscillator == 0;				copy.visible = oscillator == 1;				copy.x = handle.clip.x + dCopy.x;				copy.y = handle.clip.y + dCopy.y;			}						if(dist.length > 10){				dist.norm();				handle.momentum.x += dist.x*9;				handle.momentum.y += dist.y*9;			} else {				var dist2:Vec2D = new Vec2D(base.x - handle.x, base.y-handle.y);				dist2.norm();				handle.momentum.x += -dist2.y*tdir;				handle.momentum.y += +dist2.x*tdir;			}			handle.clip.rotation += tdir;			copy.rotation -= tdir;		}		public override function cleanup(){			copy.parent.removeChild(copy);			copy = null;		}	}}