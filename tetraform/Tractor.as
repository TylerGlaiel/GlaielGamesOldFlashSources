package {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.filters.GlowFilter;	import flash.media.Sound;	import flash.events.SampleDataEvent;	public class Tractor {		static private var count = 0;		static public var ROOT:MovieClip;				public var force:Number;		public var obj1:Attractable;		public var obj2:Attractable;		public var graphic:Sprite;		private var alive;				private var sg:Sound;		private var soundtime:Number;		private var soundpitch:Number;		private var ttime:int;		/////		public function Tractor(tgt1:Attractable, tgt2:Attractable, c:uint = 0x00FFFF, f:Number = 50){			graphic = new Sprite();			//graphic.addEventListener(Event.ENTER_FRAME, this.render, false, 0, true);						graphic.filters = [new GlowFilter(c, 1.0, 8, 8, 2, 1)];						soundtime = 0;			soundpitch = 10;			ttime = 0;						obj1 = tgt1;			obj2 = tgt2;			obj1.stable = false;			obj2.stable = false;			obj1.held++;			obj2.held++;			if(obj1.targT == null) obj1.targT = obj2;			if(obj2.targT == null) obj2.targT = obj1;						force = f;						alive = true;			count++;						if(count < 10){				sg = new Sound();				sg.addEventListener(SampleDataEvent.SAMPLE_DATA, this.sfx, false, 0, true);				if(Globals.sound) ROOT.soundChannel = sg.play();			}		}		public function update():Boolean{			if(!alive) return false;						ttime++;			if(ttime > 15*30){				Medals.unlock(Medals.EARS);			}						if(!obj1.alive || !obj2.alive || obj1.breakTether!=0 || obj2.breakTether!=0){				alive = false;				obj1.held--;				obj2.held--;				obj1.targT = null;				obj2.targT = null;				count--;				graphic.parent.removeChild(graphic);				//graphic.removeEventListener(Event.ENTER_FRAME, render);				return false;			}						if(obj1.collided(obj2)){				if(!(obj1.invmass == 0 || obj2.invmass == 0 || (obj1.held == 0 && obj2.held == 0) || (obj1.blocking && obj2.held != 0) || (obj2.blocking && obj1.held != 0))){					obj1.life -= obj2.damage;					obj2.life -= obj1.damage;					if(obj1.enm is String){						if(obj2.enm is Enemy){							ROOT.epowerup(obj2, String(obj1.enm));						}					}					if(obj2.enm is String){						if(obj1.enm is Enemy){							ROOT.epowerup(obj1, String(obj2.enm));						}					}			    }			}			var f:Vec2D = new Vec2D(obj1.x-obj2.x, obj1.y-obj2.y);			f.length = force;			obj1.momentum.x -= f.x;			obj1.momentum.y -= f.y;			obj2.momentum.x += f.x;			obj2.momentum.y += f.y;									render();						return true;		}		public function render(){			if(!alive) return;			var f:Vec2D = new Vec2D(obj2.x-obj1.x, obj2.y-obj1.y);			var step:Number = f.length;			f.norm();			graphic.graphics.clear();			graphic.graphics.lineStyle(1, 0xFFFFFF, 100);			graphic.graphics.moveTo(obj1.x, obj1.y);			for(var t:Number = 20; t<step; t += 20){				var offset:Vec2D = new Vec2D(f.y, -f.x);				offset.scale(Math.random()*20-10);				graphic.graphics.lineTo(obj1.x+f.x*t+offset.x, obj1.y+f.y*t+offset.y);			}		}				private function sfx(e:SampleDataEvent):void {			var val:Number;			function saw(f:Number):Number {				return (f*.3 - Math.floor(f*.3+.5));			}			if(alive){				for (var c:int=0; c<2048; c++) {					val = (saw(soundtime*soundpitch + Math.random()*.1)+saw(soundtime*soundpitch*1.1 + Math.random()*.2)) * ((soundtime<1)?soundtime:1);					soundtime += .001					soundpitch += .0001					e.data.writeFloat(val*.2);					e.data.writeFloat(val*.2);				}			} else {				for (var c:int=0; c<1024; c++) {					val = (saw(soundtime*soundpitch + Math.random()*.1)+saw(soundtime*soundpitch*1.1 + Math.random()*.2)) * (1024-c)/1024;					soundtime += .001					soundpitch += .0001					e.data.writeFloat(val*.2);					e.data.writeFloat(val*.2);				}				sg.removeEventListener(SampleDataEvent.SAMPLE_DATA, this.sfx);			}		}	}}