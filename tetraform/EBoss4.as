package {	import flash.events.Event;	import flash.display.MovieClip;	import flash.geom.*;	public class EBoss4 extends Enemy{		private var stat:int;		private var dir:Vec2D;		private var timer:int;		private var breakTimer:int;		private var initR:Number;		private var initIM:Number;		private var bombTimer:int;				private var state:State;		public function EBoss4 (a:Attractable, b:Attractable){			super(a, b);			stat = 0;			timer = 200;			dir = new Vec2D(10, 0);			handle.clip.rotation = Vec2D.angle2(new Vec2D(0, -1), handle.momentum);			breakTimer = 0;						initR = handle.radius;			initIM = handle.invmass;						state = State.SHUFFLE;			bombTimer = 5;			handle.rumble = 150;		}		public override function update(){			var dist:Vec2D = new Vec2D(base.x - handle.x, base.y-handle.y);						switch(state){				case State.SHUFFLE:					s_Shuffle();				break;				case State.WARP_OUT:					s_WarpOut();				break;				case State.WARP_IN:					s_WarpIn();				break;				case State.SCALE_DOWN:					s_ScaleDown();				break;				case State.TINYFAST:					s_TinyFast();				break;			}						handle.stable = true;						if(handle.held != 0) {				breakTimer++;			} else {				breakTimer = 0;			}			if(breakTimer >= 25 && state != State.WARP_OUT && state != State.SCALE_DOWN && (state != State.TINYFAST || breakTimer > 90)){				timer = 0;				state = State.WARP_OUT;			}						handle.clip.rotation = Vec2D.angle2(new Vec2D(0, -1), handle.momentum);		}				private function s_Shuffle(){			var dist:Vec2D = new Vec2D(base.x - handle.x, base.y-handle.y);						timer = (timer+2)%90;			if(timer == 0){				bombTimer = (bombTimer+1)%8;				if(bombTimer < 2){					SoundEffect.play(SoundEffect.FIRE);					ROOT.launchBomb(new Vec2D(handle.x + dir.x*10, handle.y + dir.y*10), dir.scaled(2));				}								dir.rotate(Math.random()*180-90);			}			dir.rotate(Vec2D.angle2(dir, dist)*.01);			var speed:Number = (60-timer)/4;			if(speed<0) speed = 0;						handle.momentum.x += dir.x*speed;			handle.momentum.y += dir.y*speed;						if(dist.length < 400 || dist.length  > 1100 || Math.random()<.005){				timer = 0;				if(dist.length < 400){					dist.length = 400;					handle.x = base.x - dist.x;					handle.y = base.y - dist.y;				}				state = State.WARP_OUT;			}		}		private function s_WarpOut(){			timer++;			handle.clip.scaleX = .5 * (handle.clip.scaleY = (5-timer)/5);			if(timer == 5){				state = State.WARP_IN;				var newPosOffset:Vec2D = new Vec2D(Math.random()*700+400, 0);				newPosOffset.rotate(Math.random()*360);				handle.clip.x = base.x + newPosOffset.x;				handle.clip.y = base.y + newPosOffset.y;				handle.breakTethers();			}		}		private function s_WarpIn(){			timer--;			handle.clip.scaleX = 1 * (handle.clip.scaleY = (5-timer)/5);			handle.radius = initR;			handle.invmass = initIM;			if(timer == 0){				state = State.SHUFFLE;				bombTimer = 5;				handle.clip.scaleX = handle.clip.scaleY = 1;				handle.radius = initR;				handle.invmass = initIM;								if(Math.random()<(handle.life<4000?.5:.25)){					state = State.SCALE_DOWN;				}			}		}		private function s_ScaleDown(){			timer++;			if(timer > 20){				handle.clip.scaleX = handle.clip.scaleY = (120-timer)/100;				handle.radius = initR*handle.clip.scaleX;				handle.invmass = initIM/handle.clip.scaleX;				if(timer == 100){					state = State.TINYFAST;					var newPosOffset:Vec2D = new Vec2D(Math.random()*700+250, 0);				}			}			var dist:Vec2D = new Vec2D(base.x - handle.x, base.y-handle.y);			if(dist.length < 400){				if(dist.length < 400){					dist.length = 400;					handle.x = base.x - dist.x;					handle.y = base.y - dist.y;				}			}		}		private function s_TinyFast(){			var dist:Vec2D = new Vec2D(base.x - handle.x, base.y-handle.y);						dir.rotate(stat*10);						if(Math.random() < .1 || stat == 0){				if(Math.random()<.75 || dist.length < 500){					dist.length -= 500;					stat = Vec2D.angle2(dir, dist) > 0 ? 1 : -1;				} else {					if(Math.random() < .5){						stat = 1;					} else {						stat = -1;					}				}			}						handle.momentum.x += dir.x*8;			handle.momentum.y += dir.y*8;						timer = (timer+1)%18;						if(timer == 0){				SoundEffect.play(SoundEffect.FIRE);				ROOT.launchTinyBomb(new Vec2D(handle.x, handle.y), new Vec2D(0, 0));			}						dist = new Vec2D(base.x - handle.x, base.y-handle.y);			if(dist.length < 300 || dist.length  > 1100 || Math.random()<.005){				timer = 2;				if(dist.length < 300){					dist.length = 300;					handle.x = base.x - dist.x;					handle.y = base.y - dist.y;				}				state = State.WARP_OUT;			}		}	}}internal class State {	static public var count:int = 0;	private var N:int;	function States(){N = count++;}		static public const SHUFFLE:State = new State();	static public const WARP_OUT:State = new State();	static public const WARP_IN:State = new State();	static public const SCALE_DOWN:State = new State();	static public const TINYFAST:State = new State();}