//COPYRIGHT TYLER GLAIEL 2010//VERSION 0.6//LAST MODIFIED: 4/24/10package com.glaiel.util.math{		public class RandomNumberGenerator {				private var s:uint;		private var mul:uint;		private var add:uint;		private var mask:uint;		public function RandomNumberGenerator(initial_seed:uint=0, mul_term:uint=1664525, add_term:uint=1013904223, mask_term:uint=0xFFFFFFFF) {			mul = mul_term;			add = add_term;			mask = mask_term;			seed(initial_seed);		}		public function seed(new_seed:uint){			s = new_seed;			s = (1103515245 * s + 12345);		}				//integer random		public function irand():uint {			s = (mul*s+add)&mask;			return s;		}		//double random		public function drand():Number {			return Number(irand())/(Number(mask)+1);		}				//integer ranged random		public function rand(min:int, max:int):int {			return int((drand()*(max-min)+min));		}			// double ranged random		public function random(min:Number, max:Number):Number {			return (drand()*(max-min)+min);		}				public function ZeroOrOne():int {			return rand(0, 2);		}		public function OneOrNegativeOne():int {			return ZeroOrOne()==0?1:-1;		}	}	}