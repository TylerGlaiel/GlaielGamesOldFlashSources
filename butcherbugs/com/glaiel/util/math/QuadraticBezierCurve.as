//COPYRIGHT TYLER GLAIEL 2010//VERSION 0.9//LAST MODIFIED: 4/17/10package com.glaiel.util.math{		import flash.display.Sprite;	public class QuadraticBezierCurve {				public var P0:Vec2D;		public var P1:Vec2D;		public var P2:Vec2D;				public function QuadraticBezierCurve(P0_:Vec2D, P1_:Vec2D, P2_:Vec2D) {			P0 = P0_.copy();			P1 = P1_.copy();			P2 = P2_.copy();		}			public function pointAt(t:Number):Vec2D {			return new Vec2D((1-t)*(1-t)*P0.x + 2*(1-t)*t*P1.x + t*t*P2.x, 							 (1-t)*(1-t)*P0.y + 2*(1-t)*t*P1.y + t*t*P2.y);		}		public function polarPointAt(u1:Number, u2:Number):Vec2D {			return new Vec2D((1-u1)*(1-u2)*P0.x + ((1-u1)*u2 + (1-u2)*u1)*P1.x + u1*u2*P2.x,						     (1-u1)*(1-u2)*P0.y + ((1-u1)*u2 + (1-u2)*u1)*P1.y + u1*u2*P2.y); 		}		public function slice(t0:Number, t1:Number):QuadraticBezierCurve {			return new QuadraticBezierCurve(pointAt(t0), polarPointAt(t0, t1), pointAt(t1));		}		public function get length():Number{			return 0;			//todo:implement		}		public function draw(tgt:Sprite){			tgt.graphics.moveTo(P0.x, P0.y);			tgt.graphics.curveTo(P1.x, P1.y, P2.x, P2.y);		}	}}