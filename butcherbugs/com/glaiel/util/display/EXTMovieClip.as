//COPYRIGHT TYLER GLAIEL 2010//VERSION 0.5//LAST MODIFIED: 4/26/10package com.glaiel.util.display {	import flash.display.*;	import flash.events.*;		public dynamic class EXTMovieClip extends flash.display.MovieClip {		public function EXTMovieClip(){			super();			MovieClip(this).isPlaying = true;			trace("omg");		}				public static function advance(tgt:DisplayObjectContainer):void{			if(tgt is MovieClip){				if(MovieClip(tgt).isPaused) return;									forward(MovieClip(tgt));			} 			for(var i:int = 0; i<tgt.numChildren; i++){				var MC:* = tgt.getChildAt(i);				if(MC is DisplayObjectContainer) {					advance(MC);				}			}		}		public static function forward(tgt:MovieClip):void{			if(tgt.totalFrames > 1){				if(tgt.isPlaying){					if(tgt.currentFrame == tgt.totalFrames){						tgt.gotoAndStop(1);					} else {						tgt.stop();						tgt.nextFrame();					}				}			}		}						public static function LoadIntoPrototype(){			MovieClip.prototype.isPlaying = true;			MovieClip.prototype.isPaused = false;			DisplayObject.prototype.child_command_queue = null;						DisplayObject.prototype.removeFromDisplayList = function():void{ with(this){				parent.removeChild(this);			}}			MovieClip.prototype.estop = function():void{ with(this){				stop();				isPlaying = false;			}}			MovieClip.prototype.eplay = function():void{ with(this){				stop();				isPlaying = true;			}}			MovieClip.prototype.pause = function():void{ with(this){				stop();				isPaused = true;			}}			MovieClip.prototype.unpause = function():void{ with(this){				stop();				isPaused = false;			}}			MovieClip.prototype.eGotoAndStop = function(frame:*):void{ with(this){				gotoAndStop(frame);				isPlaying = false;			}}			MovieClip.prototype.eGotoAndPlay = function(frame:*):void{ with(this){				gotoAndStop(frame);				isPlaying = true;			}}			DisplayObjectContainer.prototype.advance = function():void{ with(this){				EXTMovieClip.advance(this);			}}			DisplayObject.prototype.tellNewChild = function(childName:String, command:String, paramArray:Array):void{ with(this){			    stage.invalidate();				if(child_command_queue == null){					child_command_queue = new Vector.<ChildCommand>();				}				child_command_queue.push(new ChildCommand(childName, command, paramArray))				addEventListener(Event.RENDER, executeChildQueue);			}}			DisplayObject.prototype.executeChildQueue = function(e:Event):void { with(this){				for(var i = 0; i<child_command_queue.length; i++){					var target:* = this;					var names:Array = child_command_queue[i].childName.split(".");					for(var j:int = 0; j<names.length; j++){						target = target[names[j]];					}					target[child_command_queue[i].command].apply(target, child_command_queue[i].paramArray);				}								child_command_queue = new Vector.<ChildCommand>();								removeEventListener(Event.RENDER, executeChildQueue);			}}		}			}	}internal class ChildCommand {	public var childName:String;	public var command:String;	public var paramArray:Array;	public function ChildCommand(childName_:String, command_:String, paramArray_:Array){		childName = childName_;		command = command_;		paramArray = paramArray_;	}}