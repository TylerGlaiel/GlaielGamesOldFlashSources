class Vector {	public var x:Number;	public var y:Number;	public function Vector(i:Number, j:Number) {		x = i;		y = j;	}	public function norm():Void {		var l:Number = vLength();		x /= l;		y /= l;	}	static function add(v:Vector, v2:Vector):Vector {		return (new Vector(v2.x+v.x, v2.y+v.y));	}	static function subtract(v:Vector, v2:Vector):Vector {		return (new Vector(v.x-v2.x, v.y-v2.y));	}	static function dot(v:Vector, v2:Vector):Number {		return (v2.x*v.x+v2.y*v.y);	}	static function angle(v:Vector, v2:Vector):Number {		return (Math.acos(dot(v, v2)/(v2.vLength()*v.vLength()))/(Math.PI/180));	}	static function angle2(v:Vector, v2:Vector):Number {		var dp:Number = angle(v, v2);		if (comp(v.rotateNew(dp), v2)<.0001) {			return (dp);		} else {			return (-dp);		}	}	static function comp(v:Vector, v2:Vector):Vector {		return (Math.abs(v.x/v.vLength()-v2.x/v2.vLength())+Math.abs(v.y/v.vLength()-v2.y/v2.vLength()));	}	public function vLength():Number {		return (Math.sqrt(x*x+y*y));	}	public function perpendicular():Vector {		return (new Vector(-y, x));	}	public function scale(val:Number):Void {		x *= val;		y *= val;	}	public function rotate(degrees:Number):Void {		degrees *= Math.PI/180;		var s = Math.sin(degrees);		var c = Math.cos(degrees);		var tx:Number = x*c-y*s;		var ty:Number = x*s+y*c;		x = tx;		y = ty;	}	public function rotateNew(degrees:Number):Vector {		degrees *= Math.PI/180;		var s = Math.sin(degrees);		var c = Math.cos(degrees);		var tx:Number = x*c-y*s;		var ty:Number = x*s+y*c;		return (new Vector(tx, ty));	}	public function reflect(normal:Vector):Vector {		var normal2:Vector = new Vector(normal.x, normal.y);		normal2.norm();		normal2.scale(2*dot(this, normal2));		return (subtract(this, normal2));	}	public function display(point:Vector, scale:Number, tgt:MovieClip):Void {		tgt.lineStyle(3, 0xFFFFFF, 100);		tgt.moveTo(point.x, point.y);		tgt.lineTo(point.x+x*scale, point.y+y*scale);		var nv:Vector = new Vector(-x, -y);		nv.norm();		nv.scale(.5);		nv.rotate(-45);		tgt.lineTo(point.x+x*scale+nv.x*scale, point.y+y*scale+nv.y*scale);		tgt.moveTo(point.x+x*scale, point.y+y*scale);		nv.rotate(90);		tgt.lineTo(point.x+x*scale+nv.x*scale, point.y+y*scale+nv.y*scale);		tgt.lineStyle(2, 0x000000, 100);		tgt.moveTo(point.x, point.y);		tgt.lineTo(point.x+x*scale, point.y+y*scale);		var nv2:Vector = new Vector(-x, -y);		nv2.norm();		nv2.scale(.5);		nv2.rotate(-45);		tgt.lineTo(point.x+x*scale+nv2.x*scale, point.y+y*scale+nv2.y*scale);		tgt.moveTo(point.x+x*scale, point.y+y*scale);		nv2.rotate(90);		tgt.lineTo(point.x+x*scale+nv2.x*scale, point.y+y*scale+nv2.y*scale);	}}